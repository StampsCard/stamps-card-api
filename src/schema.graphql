scalar DateTime
scalar Date
scalar Time

enum UserRole {
  CUSTOMER,
  BUSINESS_OWNER
}

# import User from "./generated/prisma.graphql"
# import Business from "./generated/prisma.graphql"
# import BusinessType from "./generated/prisma.graphql"
# import StampCard from "./generated/prisma.graphql"
# import Purchase from "./generated/prisma.graphql"

type AuthUser {
  user: User!
  userRole: UserRole
}

type Store {
  business: Business!
  totalOfStamps: Int!
}

type Customer {
  user: User!
  lastPayment: DateTime
  spent: Int!
}

type StampCardWithStats {
  stampCard: StampCard!
  spent: Float!
  amount: Int!
}

type Query {
  users: [User!]!
  user(id: ID!): User!
  login(email: String!, password: String!): AuthUser!
  customersByBusiness(businessId: ID!): [Customer!]!

  businesses: [Business!]!
  business(id: ID!): Business!
  storesByCustomer(userId: ID!): [Store!]!
  businessesByOwner(userId: ID!): [Business!]!

  businessType(id: ID!): BusinessType!
  businessTypeByName(name: String!): BusinessType

  stampCards: [StampCard!]!
  stampCard(id: ID!): StampCard!
  stampCardsByUser(userId: ID!): [StampCardWithStats!]!

  purchases: [Purchase!]!
  purchase(id: ID!): Purchase!
  purchasesByUser(userId: ID!): [Purchase!]!
  purchasesByBusiness(businessId: ID!): [Purchase!]!
}

type Mutation {
  createUser(username: String!, email: String!, password: String!, firstName: String, lastName: String): User!
  updateUser(id: ID!, username: String!, email: String!, password: String!, firstName: String, lastName: String): User!
  deleteUser(id: ID!): User!

  createBusiness(name: String!, categoryName: String!, categoryDescription: String, ownerId: ID!): Business!
  updateBusiness(id: ID!, name: String!, categoryName: String!, categoryDescription: String, ownerId: ID!): Business!
  deleteBusiness(id: ID!): Business!

  createBusinessType(name: String!, description: String): BusinessType!

  createStampCard(stampPrice: Float!, businessId: ID!, total: Int!, discount: String!): StampCard!
  updateStampCard(id: ID!, stampPrice: Float!, businessId: String!, total: Int!, discount: String!): StampCard!
  deleteStampCard(id: ID!): StampCard!

  createPurchase(amount: Float!, stampId: ID!, concept: String): Purchase!
  confirmPurchase(id: ID!, userId: ID!): Purchase!
  cancelPurchase(id: ID!, userId: ID): Purchase!
}